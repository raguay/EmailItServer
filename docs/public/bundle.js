var app=function(){"use strict";function t(){}function e(t){return t()}function n(){return Object.create(null)}function o(t){t.forEach(e)}function a(t){return"function"==typeof t}function s(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function r(t,e){t.appendChild(e)}function i(t,e,n){t.insertBefore(e,n||null)}function l(t){t.parentNode.removeChild(t)}function c(t){return document.createElement(t)}function p(t){return document.createTextNode(t)}function d(){return p(" ")}function h(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function u(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}let m;function g(t){m=t}const f=[],w=[],y=[],k=[],b=Promise.resolve();let T=!1;function x(t){y.push(t)}let v=!1;const M=new Set;function C(){if(!v){v=!0;do{for(let t=0;t<f.length;t+=1){const e=f[t];g(e),$(e.$$)}for(f.length=0;w.length;)w.pop()();for(let t=0;t<y.length;t+=1){const e=y[t];M.has(e)||(M.add(e),e())}y.length=0}while(f.length);for(;k.length;)k.pop()();T=!1,v=!1,M.clear()}}function $(t){if(null!==t.fragment){t.update(),o(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(x)}}const L=new Set;let P;function H(t,e){t&&t.i&&(L.delete(t),t.i(e))}function S(t,e,n,o){if(t&&t.o){if(L.has(t))return;L.add(t),P.c.push(()=>{L.delete(t),o&&(n&&t.d(1),o())}),t.o(e)}}function B(t){t&&t.c()}function I(t,n,s){const{fragment:r,on_mount:i,on_destroy:l,after_update:c}=t.$$;r&&r.m(n,s),x(()=>{const n=i.map(e).filter(a);l?l.push(...n):o(n),t.$$.on_mount=[]}),c.forEach(x)}function A(t,e){const n=t.$$;null!==n.fragment&&(o(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function q(t,e){-1===t.$$.dirty[0]&&(f.push(t),T||(T=!0,b.then(C)),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function E(e,a,s,r,i,c,p=[-1]){const d=m;g(e);const h=a.props||{},u=e.$$={fragment:null,ctx:null,props:c,update:t,not_equal:i,bound:n(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:n(),dirty:p};let f=!1;if(u.ctx=s?s(e,h,(t,n,...o)=>{const a=o.length?o[0]:n;return u.ctx&&i(u.ctx[t],u.ctx[t]=a)&&(u.bound[t]&&u.bound[t](a),f&&q(e,t)),n}):[],u.update(),f=!0,o(u.before_update),u.fragment=!!r&&r(u.ctx),a.target){if(a.hydrate){const t=function(t){return Array.from(t.childNodes)}(a.target);u.fragment&&u.fragment.l(t),t.forEach(l)}else u.fragment&&u.fragment.c();a.intro&&H(e.$$.fragment),I(e,a.target,a.anchor),C()}g(d)}class R{$destroy(){A(this,1),this.$destroy=t}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}}function N(e){let n,o,a,s,h,u,m,g,f,w,y,k,b,T,x,v,M,C,$;return{c(){n=c("h1"),n.textContent="About ScriptPad",o=d(),a=c("p"),s=c("strong"),s.textContent="ScriptPad",h=p(" is a program for keeping track of nine notes in your menubar,\nediting them with regular expressions, and executing scripts on the\nhighlighted text or the full note. It currently comes with "),u=p(j),m=p("\npredefined scripts. You can create and save your own scripts and\nregular expressions as well."),g=d(),f=c("p"),f.innerHTML='You can also see your <a href="https://noteplan.co/" rel="nofollow">NotePlan</a> todo list and any\n<a href="https://www.taskpaper.com/" rel="nofollow">TaskPaper</a> todo list in the Todo section\n(the clipboard icon on the right). Not only can you view the todo lists,\nyou can add to them, check items off the list, and delete them. Completed\nitems are automatically moved to the bottom for easier viewing of the\nactive items.',w=d(),y=c("p"),y.textContent="You can also use templates to populate a notepad, modify it, then copy\npaste it to other programs. You can define your own templates and make\nuse of various macros. You can even write your own macros to the template\nsystem.",k=d(),b=c("p"),b.innerHTML='By clicking on the hamburger menu to the lower left, you can see the\nmain menu. The main menu allows you to open each of the sections of\nScriptPad. It allso gives access to the help section you are reading now.\nThere are also several launchers to install various helper extensions\nfor <a href="https://www.alfredapp.com/" rel="nofollow">Alfred</a>,\n<a href="https://obdev.at/products/launchbar/index.html" rel="nofollow">LaunchBar</a>,\n<a href="https://pilotmoon.com/popclip/" rel="nofollow">PopClip</a>, <a href="https://aptonic.com/" rel="nofollow">Dropzone 3</a>,\nand <a href="https://www.keyboardmaestro.com/main/" rel="nofollow">Keyboard Maestro</a> to automate\nworking with <strong>ScriptPad</strong>. These scripts allow you to run any functionality\nof ScriptPad in other applications. For instance, you can highlight some\ntext and apply a script to it. Or, you can populate any text processor\nfrom a template that you have designed.',T=d(),x=c("p"),x.textContent=`ScriptPad also has a module system where you can run modules that have\nbeen created or your own designs. There are currently ${W} modules with\nmany more to come.`,v=d(),M=c("p"),M.textContent="I’m also working on giving ScriptPad the ability to run external scripts\nin it’s own environment, a command console to run scripts on files, and\nmany more ideals. If you have any suggestions, please let me know.",C=d(),$=c("p"),$.textContent="Thank you for using this product."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),r(a,s),r(a,h),r(a,u),r(a,m),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e),i(t,C,e),i(t,$,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M),t&&l(C),t&&l($)}}}var W="two",j=32;class D extends R{constructor(t){super(),E(this,t,null,N,s,{})}}function Y(e){let n,o,a,s,r,p,h,u,m,g,f,w,y,k,b,T,x,v,M;return{c(){n=c("h1"),n.textContent="Main Window",o=d(),a=c("p"),a.innerHTML='<img src="http://localhost:9978/imgs/MainWindow.jpg" alt="The Main Window">',s=d(),r=c("p"),r.innerHTML="When you run the ScriptPad program, you will see the above picture.\nScriptPad has nine circles at the bottom. Each one is a different notepad to use.\nThe notepad currently in use has a larger circle than the ones that are inactive.\nIn the above picture, the third notepad is currently active. You can switch\nnotepads by clicking on the circles or by the keyboard shortcut <code>&lt;ctrl&gt; 1</code> for\nthe first notepad, <code>&lt;ctrl&gt; 2</code> for the second, and so on.",p=d(),h=c("p"),h.textContent="The hamburger menu on the far left opens the main menu. The clipboard icon on the\nfar right opens the Todo List.",u=d(),m=c("p"),m.textContent="Each notepad can be edited with all edits saved to your hard drive in a special\nlocation. The information is in a plaintext format. Therefore, it is recommended\nto not put any sensitive data into it.",g=d(),f=c("p"),f.innerHTML="By pressing <code>&lt;ctrl&gt; m</code>, you will open the scripts menu. This gives a list of\nbuilt-in and user defined scripts to execute on the text in the current notepad.\nIf you have some text highlighted, just that text will be sent to the script.\nIf nothing is highlighted, than the whole note will be sent to the script. ",w=d(),y=c("p"),y.innerHTML="You can access the script editor by pressing <code>&lt;ctrl&gt; e</code>. The script editor allows\nyou to create and edit your own scripts.",k=d(),b=c("p"),b.innerHTML="By pressing <code>&lt;ctrl&gt; r</code>, you will open the regular expressions editor. With this\neditor, you can create, save, and edit the current notepad by using a regular\nexpression.",T=d(),x=c("p"),x.innerHTML="By pressing <code>&lt;ctrl&gt; p</code> you will be given a list of templates to insert into the\nnote and the current cursor location. You can edit/create/delete templates from\nthe template editor using either the item in the main menu or by pressing\n<code>&lt;ctrl&gt; t</code>.",v=d(),M=c("p"),M.innerHTML="By pressing <code>&lt;ctrl&gt; o</code> you will open the command console. This part is still\nunder construction."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M)}}}class U extends R{constructor(t){super(),E(this,t,null,Y,s,{})}}function F(e){let n,o,a,s,r,p,h,u,m,g,f,w,y,k,b,T,x;return{c(){n=c("h1"),n.textContent="Main Menu",o=d(),a=c("p"),a.innerHTML='<img src="http://localhost:9978/imgs/MainMenu.png" alt="Main Menu">',s=d(),r=c("p"),r.innerHTML='By clicking on the hamburger icon on the lower far left corner, you\nwill open the main menu shown above. This give you access to the\nscript editor, the regular expressions editor, template editor, and the\ncommand console. You can also access the installers for\n<strong>Alfred</strong>, <strong>Keyboard Maestro</strong>, <strong>Dropzone 3</strong>, <strong>PopClip</strong>, and\n<strong>LaunchBar</strong>. These scripts allows you to copy files or text to\nspecified notepads. It also allows you to execute scripts on text\nsent to it as well. There is a <a href="https://fman.io" rel="nofollow">fman</a> plugin for\nworking with ScriptPad.',p=d(),h=c("p"),h.innerHTML="You can also change the preferences from the main menu by selecting\n<code>Preferences</code>. The preference page will describe everything you can\nchange there.",u=d(),m=c("p"),m.innerHTML="The last option, <code>Quit</code>, will exit out of the ScriptPad program. If\nthe program isn’t running, the scripts for the <strong>Alfred</strong>, <strong>fman</strong>,\n<strong>Keyboard Maestro</strong>, <strong>Dropzone 3</strong>, <strong>PopClip</strong>, and <strong>LaunchBar</strong>\nwill not function as well.",g=d(),f=c("p"),f.innerHTML='<img src="http://localhost:9978/imgs/About.png" alt="About Dialog">',w=d(),y=c("p"),y.innerHTML='If you select <code>About</code> in the main menu, you will see the above about\ndialog. This dialog tells about who created the program and the third\nparty tools used. This program is created with\n<strong><a href="https://svelte.dev" rel="nofollow">Svelte v3</a></strong>,\n<strong><a href="https://github.com/jakedeichert/mask" rel="nofollow">Mask</a></strong>, and\n<strong><a href="https://nwjs.io/" rel="nofollow">NW.js</a></strong>.',k=d(),b=c("p"),b.innerHTML='From this main menu, you can open the\n<a href="http://localhost:9978/CommandConsole" rel="nofollow">Command Console</a> which gives access\nto <a href="/#/NodeRed">Node-Red</a> console. From there you can\nrun different scripting commands and actions.',T=d(),x=c("p"),x.innerHTML="The <code>Close</code> button will close the dialog. Openning any other dialog\nwill also close this dialog."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x)}}}class O extends R{constructor(t){super(),E(this,t,null,F,s,{})}}function z(e){let n,o,a,s,r,p,h,m,g,f,w,y,k,b,T,x,v,M,C,$,L,P,H,S,B,I,A,q,E,R,N,W,j,D,Y,U,F,O,z,_,G,J,K,Q,V,X,Z;return{c(){n=c("h1"),n.textContent="Scripts",o=d(),a=c("p"),a.textContent="The scripts section of ScriptPad comes in two areas: running scripts from the\nmenu and creating/editing the scripts in the script editor.",s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/ScriptsMenu.png" alt="Scripts Menu">',p=d(),h=c("p"),h.innerHTML="When you are in a note area, press <code>&lt;ctrl&gt;+m</code> to toggle the scripts menu as seen\nabove. Your scripts are the brighter blue and the system scripts are the paler\nblue (assuming your still using the default theme). This menu will always show\nyour scripts first.",m=d(),g=c("p"),g.innerHTML="As you type in the scripts menu, the choices will narrow down according to what\nyou type. This is to help you navigate the large number of scripts. You can use\nthe up and down arrow keys to move the highlight. Pressing <code>&lt;enter&gt;</code> will action\nthe script.",f=d(),w=c("p"),w.textContent="If you had text selected in the note, that text will be passed to the script.\nOtherwise, the whole note will be passed to the script. Whatever the script\nreturns, will replace the text sent to it.",y=d(),k=c("h2"),k.textContent="Script Editor",b=d(),T=c("p"),T.innerHTML='<img src="http://localhost:9978/imgs/ScriptEditor.png" alt="Script Editor">',x=d(),v=c("p"),v.innerHTML="By pressing <code>&lt;ctrl&gt;+e</code>, you can open the script editor window shown above.  The\nscript editor is used to create/edit user script to use on the notepads using\nthe <code>&lt;ctrl&gt;+m</code> script menu. These scripts can process the text given in the\ncurrent notepad, add new information to the current notepad, or totally over\nwrite it. It’s up to you what you want your script to do.",M=d(),C=c("p"),C.textContent="The first input takes the name of the script. If you give a new script the same\nname as one that already exists, you will over write it. It will not let you name\na user script the same as a system script.",$=d(),L=c("p"),L.textContent="The check box after the script name tells NotePad to insert the returned\ninformation if checked. If not checked, it will replace the selected text or all\nthe text in the notepad if no text was selected.",P=d(),H=c("p"),H.innerHTML="The variable <code>SP.text</code> contains either all the text in the note if there wasn’t\na selection, or just the selected text. You read this variable to get the text to\nprocess and write into the variable what you want to replace either the selection\nor all the text in the notepad.",S=d(),B=c("p"),B.textContent="There are some predefined libraries in variables for your scripts to use. You\ncan make use of the following:",I=d(),A=c("table"),A.innerHTML='<thead><tr><th></th> \n<th></th></tr></thead> \n<tbody><tr><td>SP.jQuery</td> \n<td><a href="https://jquery.com" rel="nofollow">jQuery library</a></td></tr> \n<tr><td>SP.mathjs</td> \n<td><a href="http://mathjs.org/" rel="nofollow">Math.js library</a></td></tr> \n<tr><td>SP.moment</td> \n<td><a href="https://momentjs.com" rel="nofollow">moment.js library</a></td></tr> \n<tr><td>SP.Handlebars</td> \n<td><a href="https://handlebarsjs.com/" rel="nofollow">Handlebars library</a></td></tr></tbody>',q=d(),E=c("p"),E.textContent="The are some predefined function available as well:",R=d(),N=c("table"),N.innerHTML="<thead><tr><th></th> \n<th></th></tr></thead> \n<tbody><tr><td>SP.insertCharacters(<code>&lt;num&gt;</code>,<code>&lt;char&gt;</code>)</td> \n<td>This function makes a string of <code>&lt;num&gt;</code>  <code>&lt;char&gt;</code>.</td></tr> \n<tr><td>SP.returnNote(<code>&lt;id&gt;</code>)</td> \n<td>This function returns the note with the <code>&lt;id&gt;</code>.</td></tr> \n<tr><td>SP.runScript(<code>&lt;scrpt&gt;</code>,<code>&lt;text&gt;</code>)</td> \n<td>This function runs the <code>&lt;scrpt&gt;</code> as a string on the <code>&lt;text&gt;</code> text.</td></tr></tbody>",W=d(),j=c("p"),j.textContent="You can create script in one note and use a different note for the input.\nFor example, in a note, place the following code:",D=d(),Y=c("pre"),U=d(),F=c("p"),F.innerHTML="Then go to a different note and place several lines of text. Run the\nscript <code>Bullet lines with Numbers</code>. Every line will have the proper number at\nthe front of it. Now, run the script <code>Evaluate Note # as Script</code> with <code>#</code> the\nnumber of the note where you put the script. The numbers at the beginning will now be\nremoved! You can use the script editor to save this script and use it from the\nscript menu.",O=d(),z=c("h3"),z.textContent="Predefined Math Scripts",_=d(),G=c("p"),G.textContent="NotePad has scripts for processing math: the ‘Basic Math’ and ‘Evaluate Page for\nMath’ scripts. The ‘Basic Math’ script is for processing arbitrary pieces of math\nin a selection. The ‘Evaluate Page for Math’ script is for processing the entire\nnote with a nice running result along the right. The ‘Basic Math’ script doesn’t\nreset the state of the math library (ie: variable definitions and functions),\nbut the ‘Evaluate Page for Math’ does each time invoked so as to not create\nmultiple copies of function and variables.",J=d(),K=c("p"),K.textContent="Copy the following note to a notepad:",Q=d(),V=c("pre"),X=d(),Z=c("p"),Z.innerHTML="Then press <code>&lt;ctrl&gt;-m</code> and select the ‘Evaluate Page for Math’ script. Each\nline with the ’&gt;’ as the front character now has the results to the right.\nWhen you change the text lines and re-run the script, the math lines are all\nupdated. All other lines are not effected by the script. You can change any\nequation or variable and it’s effects will trickle down the page.",u(Y,"class","language-js"),u(V,"class","language-md")},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e),i(t,C,e),i(t,$,e),i(t,L,e),i(t,P,e),i(t,H,e),i(t,S,e),i(t,B,e),i(t,I,e),i(t,A,e),i(t,q,e),i(t,E,e),i(t,R,e),i(t,N,e),i(t,W,e),i(t,j,e),i(t,D,e),i(t,Y,e),Y.innerHTML='\n<code class="language-js">\n<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">var</span> lines <span class="token operator">=</span> <span class="token constant">SP</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'&#92;n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token constant">SP</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">var</span> match <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^d+. (.*)$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token constant">SP</span><span class="token punctuation">.</span>text <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">\'&#92;n\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n   <span class="token constant">SP</span><span class="token punctuation">.</span>text <span class="token operator">+=</span> <span class="token string">"&#92;n&#92;n"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">&#125;</span>\n</code>',i(t,U,e),i(t,F,e),i(t,O,e),i(t,z,e),i(t,_,e),i(t,G,e),i(t,J,e),i(t,K,e),i(t,Q,e),i(t,V,e),V.innerHTML='\n<code class="language-md">\n<span class="token title important"><span class="token punctuation">#</span> Using the ‘Evaluate Page for Math’ script</span>\n\nYour notes can have any text you need. But when a line starts with a ‘>’, t\nhat whole line is processed for math. The line is processed and the answer pushed\nto the right with a ‘|’ symbol.\n\n<span class="token blockquote punctuation">></span> 6 <span class="token italic"><span class="token punctuation">*</span><span class="token content"> 95\n> x=6</span><span class="token punctuation">*</span></span>8-10\n<span class="token blockquote punctuation">></span> x\n\nText in the middle doesn’t clear out the variable or function assignments before it.\n\n<span class="token blockquote punctuation">></span> f(x)=x^2-5*x+12\n<span class="token blockquote punctuation">></span> f(60)\n<span class="token blockquote punctuation">></span> f(x)\n\nThe length of the note isn’t a concern either.\n\n<span class="token blockquote punctuation">></span> f(100)\n\n<span class="token blockquote punctuation">></span> bank=34675\n<span class="token blockquote punctuation">></span> check=5067\n<span class="token blockquote punctuation">></span> balance = bank - check\n\n<span class="token blockquote punctuation">></span> sin(45)\n\nThe math package used doesn’t do conversions or symbols inside of the mat\nh expressions. The math library used is <span class="token url">[<span class="token content">mathjs 4.0</span>](http://mathjs.org/)</span>.\n</code>',i(t,X,e),i(t,Z,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M),t&&l(C),t&&l($),t&&l(L),t&&l(P),t&&l(H),t&&l(S),t&&l(B),t&&l(I),t&&l(A),t&&l(q),t&&l(E),t&&l(R),t&&l(N),t&&l(W),t&&l(j),t&&l(D),t&&l(Y),t&&l(U),t&&l(F),t&&l(O),t&&l(z),t&&l(_),t&&l(G),t&&l(J),t&&l(K),t&&l(Q),t&&l(V),t&&l(X),t&&l(Z)}}}class _ extends R{constructor(t){super(),E(this,t,null,z,s,{})}}function G(e){let n,o,a,s,r;return{c(){n=c("h1"),n.textContent="Regular Expression Editor",o=d(),a=c("p"),a.innerHTML='<img src="http://localhost:9978/imgs/RegExpEditor.png" alt="Regular Expression Editor">',s=d(),r=c("p"),r.innerHTML="The Regular Expression editor will show you the results of your regular\nexpressions, and color code the sub-matches (embedded sub-matches are not\nsupported). You can save your regular expressions and recall them by name\ngiven. You invoke the regular expression editor with <code>&lt;ctrl&gt;-r</code>. You can list\nthe defined regular expressions with <code>&lt;ctrl&gt;-m</code>. The editor will allow you to\nsave the regular expressions with the <code>Save</code> button and perform all the\nsubstitutions with the <code>Change All</code> button. You can also extract the selected\nentries using the <code>Extract</code> button. Pressing <code>&lt;ctrl&gt;-r</code>, <code>Extract</code> button, or the\n<code>Change All</code> button will close the regular expressions editor. "},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r)}}}class J extends R{constructor(t){super(),E(this,t,null,G,s,{})}}function K(e){let n,o,a,s,r,p,h;return{c(){n=c("h1"),n.textContent="Features Still Coming",o=d(),a=c("p"),a.textContent="Since I use this application everyday, I’m constantly thinking of new things I would like to add. If you have any new ideas, just let me know and I’ll see what I can do.",s=d(),r=c("p"),r.textContent="Currently, these are things that I’m either working on or plan to do:",p=d(),h=c("ul"),h.innerHTML='<li>Script launching webpage for using tablets/phones as a launch control center.</li> \n<li>Command line console with similar features to Xiki.<ul><li>A way to run scripts on files.</li> \n<li>Tracks the disk location.</li> \n<li>Make it similar to what Xiki could have been.\t - Use <a href="https://xtermjs.org/" rel="nofollow">xterm: Console terminal in the browser</a></li></ul></li> \n<li>Running a script from inside of a script isn’t working.</li> \n<li>Add the ability for running external scripts.</li> \n<li>Add scripts from GitHub that are marked for Scriptpad.</li> \n<li>Create a library to use for controling other windows. </li> \n<li>Get it working on Linux and Windows.</li> \n<li>Create modules for:<ul><li>the BitBar and Infinity Desktop work-a-like.</li> \n<li>An icon on the desktop side that expands to a directory view.</li></ul></li>'},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h)}}}class Q extends R{constructor(t){super(),E(this,t,null,K,s,{})}}function V(e){let n,o,a;return{c(){n=c("h1"),n.textContent="Files Used By NotePad",o=d(),a=c("p"),a.innerHTML="All notes, scripts, and preferences are stored in the home directory called\n<code>~/.scriptpad/</code>. The notes are in the file <code>.notesjson</code>. All user defined\nscripts are kept in the file <code>.scriptsjson</code>. All user defined regular expressions\nare stored in the <code>.regexpjson</code> file. The preferences are in the <code>preferences.json</code>\nfile while all the styles are in the <code>styles</code> directory. The preferences for the\nBulliten Board program are in the file <code>bullitenBoard.json</code>. The <code>templates.json</code>\nfile contains all of the user defined templates. The <code>dialogs</code> directory contains\nthe user defined dialogs."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a)}}}class X extends R{constructor(t){super(),E(this,t,null,V,s,{})}}function Z(e){let n,o,a,s,r;return{c(){n=c("h1"),n.textContent="Todo List",o=d(),a=c("p"),a.innerHTML='<img src="http://localhost:9978/imgs/TodoList.png" alt="Todo List">',s=d(),r=c("p"),r.innerHTML='The todo list is currently populated from your <strong><a href="www.noteplanapp.com">NotePlan</a></strong>\ntodo for the current day and any <strong><a href="https://www.taskpaper.com/" rel="nofollow">TaskPaper</a></strong> formated files you add to it in\nthe preferences. You can add new todos by typing in the input box on top\nand press enter. You can mark a todo as done by clicking on the empty box. You\ncan remove a todo from the display by clicking the <code>x</code> to the right of the todo\nitem. Deleting the item doesn’t actually delete it, but marks it as done and\nremoves it from being displayed.'},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r)}}}class tt extends R{constructor(t){super(),E(this,t,null,Z,s,{})}}function et(e){let n,o,a,s,r,p,h,u,m,g,f,w,y,k,b,T,x,v,M;return{c(){n=c("h1"),n.textContent="Preferences",o=d(),a=c("p"),a.innerHTML='<img src="http://localhost:9978/imgs/Preferences-General.png" alt="Preferences - General">',s=d(),r=c("p"),r.innerHTML="When you press the <code>Preferences</code> link in the main menu, this dialog will open.\nOn the <code>General</code> tab, you can change the code wrap and editor keyboard mappings\nfor the different editors.",p=d(),h=c("p"),h.innerHTML="The bottom of all of the Preferences screens show a <code>Save Styles &amp; Preferences</code>\nand a <code>Quit Preferences</code> button. The first will save the preferences to the hard\ndrive while the other will leave the preferences dialog all together.",u=d(),m=c("p"),m.innerHTML='<img src="http://localhost:9978/imgs/Preferences-Theme.png" alt="Preferences - Theme">',g=d(),f=c("p"),f.innerHTML="When you click the <code>Theme</code> tab, you will get this screen. Here, you can change\nthe theme of <strong>ScriptPad</strong> or create your own. Setting the <code>Name of theme</code> to\n<code>New</code> will allow you to add a new name for a theme. The changes will be saved\ninto that theme name.",w=d(),y=c("p"),y.innerHTML='<img src="http://localhost:9978/imgs/Preferences-ColorPicker.png" alt="Color Picker">',k=d(),b=c("p"),b.innerHTML="Clicking on a colored circle will show a color picker dialog to pick a new color.\nSelect a color and press the <code>Select</code> button to set the new color. The <code>Quit</code>\nbutton will exit the color picker without setting a new color. You can also enter\nan RGB hex value for the color in the input dialog.",T=d(),x=c("p"),x.innerHTML='<img src="http://localhost:9978/imgs/Preferences-Todo.png" alt="Preferences - Todo">',v=d(),M=c("p"),M.innerHTML="When you click the <code>Todo</code> tab, you will be able to enable/disable the <strong>NotePlan</strong>\ntodo list and the <strong>TaskPaper</strong> todo lists. <strong>NotePlan</strong> will just show the current\ndays todo items, while the <strong>TaskPaper</strong> todo list can be as many files as you want.\nYou specify the location of the file and the name you want to associate with it."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M)}}}class nt extends R{constructor(t){super(),E(this,t,null,et,s,{})}}function ot(e){let n,o,a,s,r,p,h,u,m,g,f,w,y,k,b,T,x,v,M,C,$,L,P,H,S,B,I,A,q,E,R,N,W,j,D,Y,U,F,O,z,_,G,J,K,Q,V,X,Z,tt,et,nt,ot,at,st,rt;return{c(){n=c("h1"),n.textContent="Templater",o=d(),a=c("p"),a.innerHTML="ScriptPad comes with a full template system built with Handlebars. It is accessed in\nthe notes with <code>&lt;ctrl&gt;+p</code>. The menu will prompt for which template to insert into\nthe note. User defined templates are in a lighter blue than the system templates\n(assuming you are using the default theme).",s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/TemplaterMenu.jpg" alt="Template Selection Menu">',p=d(),h=c("p"),h.textContent="When you start typing, the menu will shorten the list based on the closest match\nto what you type. When you select a template, it is expanded in the note at the\nlocation of the cursor. This is added to the note and will not destroy text\nalready there.",u=d(),m=c("p"),m.innerHTML="Pressing <code>&lt;ctrl&gt;+p</code> again without selecting a template will will close the\ntemplate menu.",g=d(),f=c("h2"),f.textContent="Template Editor",w=d(),y=c("p"),y.innerHTML='<img src="http://localhost:9978/imgs/TemplateEditor.jpg" alt="Template Editor">',k=d(),b=c("p"),b.innerHTML="Pressing <code>&lt;ctrl&gt;+t</code> will open the template editor shown above. You have to give it\na name, description, and the actual template. ",T=d(),x=c("h2"),x.textContent="Template Syntax",v=d(),M=c("p"),M.innerHTML='The templating engine used is call <a href="https://handlebarsjs.com/" rel="nofollow">Handlebars</a>. It is\nused in the templates and in the dialog boxes for the BulletinBoard. Handlebars\nallows you to have a text file with anything in it along with some macros. Some\nmacros need auguments and some do not. The macros are expanded and placed into the\ntext. Macros with arguments are called helpers. Along with\nthe standard Handlebar helpers, several others have been added as well. The\nfollowing is an explanation of the additional helpers:',C=d(),$=c("table"),$.innerHTML="<thead><tr><th></th> \n<th></th></tr></thead> \n<tbody><tr><td><code>{{save &lt;name&gt; &lt;text&gt;}}</code></td> \n<td>This command creates a helper named <code>&lt;name&gt;</code> with the expanding text of <code>&lt;text&gt;</code>. It also places the given <code>&lt;text&gt;</code> at the point of definition. This allows you to create text snippets on the fly inside the template. Very handy.</td></tr> \n<tr><td><code>{{clipboard}}</code></td> \n<td>This helper command places the current clipboard contents at the point in the template.</td></tr> \n<tr><td><code>{{date &lt;format&gt;}}</code></td> \n<td>This will format the current date and time as per the format string given. See the help document that is loaded upon initialization.</td></tr> \n<tr><td><code>{{cdate &lt;date/time&gt; &lt;format&gt;}}</code></td> \n<td>This takes the date/time string and formats it according to the format given. See the help document that is loaded upon initialization.</td></tr> \n<tr><td><code>{{env &lt;name&gt;}}</code></td> \n<td>This will place the environment variable that matches <code>&lt;name&gt;</code> at that location</td></tr> \n<tr><td><code>{{last &lt;weeks&gt; &lt;dow&gt; &lt;format&gt;}}</code></td> \n<td>This will print the date <code>&lt;weeks&gt;</code> ago in the <code>&lt;format&gt;</code> format for the <code>&lt;dow&gt;</code> day of week.</td></tr> \n<tr><td><code>{{next &lt;weeks&gt; &lt;dow&gt; &lt;format&gt;}}</code></td> \n<td>This will print the date <code>&lt;weeks&gt;</code> in the future using the <code>&lt;format&gt;</code> format for the <code>&lt;dow&gt;</code> day of week.</td></tr> \n<tr><td><code>{{userfillin &lt;question&gt; &lt;default&gt;}}</code></td> \n<td>This will prompt the user with <code>&lt;question&gt;</code> and put the <code>&lt;default&gt;</code> as a quick answer. The response will be put into the template.</td></tr> \n<tr><td><code>{{copyclip &lt;clipname&gt;}}</code></td> \n<td>This will put the Alfred Copy Clip workflow’s <code>&lt;clipname&gt;</code> into the template.</td></tr></tbody>",L=d(),P=c("p"),P.textContent="The following data expansions are defined as well:",H=d(),S=c("p"),S.innerHTML="<code>{{cDateMDY}}</code> gives the current date in Month Day, 4-digit year format",B=d(),I=c("p"),I.innerHTML="<code>{{cDateDMY}}</code> gives the current date in Day Month 4-digit Year format",A=d(),q=c("p"),q.innerHTML="<code>{{cDateDOWDMY}}</code> gives the current date in Day of Week, Day Month 4-digit year format",E=d(),R=c("p"),R.innerHTML="<code>{{cDateDOWMDY}}</code> gives the current date in Day of Week Month Day, 4-digit year format",N=d(),W=c("p"),W.innerHTML="<code>{{cDay}}</code> gives the current date in Day format",j=d(),D=c("p"),D.innerHTML="<code>{{cMonth}}</code> gives the current date in Month format",Y=d(),U=c("p"),U.innerHTML="<code>{{cYear}}</code> gives the current date in 4-digit year format",F=d(),O=c("p"),O.innerHTML="<code>{{cMonthShort}}</code> gives the current date in Short Month name format",z=d(),_=c("p"),_.innerHTML="<code>{{cYearShort}}</code> gives the current date in 2-digit year format",G=d(),J=c("p"),J.innerHTML="<code>{{cDOW}}</code> gives the current date in Day of Week format",K=d(),Q=c("p"),Q.innerHTML="<code>{{cMDthYShort}}</code> gives the current date in Month day 2-digit year format",V=d(),X=c("p"),X.innerHTML="<code>{{cMDthY}}</code> gives the current date in Month Day 4-digit year format",Z=d(),tt=c("p"),tt.innerHTML="<code>{{cHMSampm}}</code> gives the current date in h:mm:ss a format",et=d(),nt=c("p"),nt.innerHTML="<code>{{cHMampm}}</code> gives the current date in h:mm a format",ot=d(),at=c("p"),at.innerHTML="<code>{{cHMS24}}</code> gives the current date in H:mm:ss 24 hour format",st=d(),rt=c("p"),rt.innerHTML="<code>{{cHM24}}</code> gives the current date in H:mm 24 hour format"},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e),i(t,C,e),i(t,$,e),i(t,L,e),i(t,P,e),i(t,H,e),i(t,S,e),i(t,B,e),i(t,I,e),i(t,A,e),i(t,q,e),i(t,E,e),i(t,R,e),i(t,N,e),i(t,W,e),i(t,j,e),i(t,D,e),i(t,Y,e),i(t,U,e),i(t,F,e),i(t,O,e),i(t,z,e),i(t,_,e),i(t,G,e),i(t,J,e),i(t,K,e),i(t,Q,e),i(t,V,e),i(t,X,e),i(t,Z,e),i(t,tt,e),i(t,et,e),i(t,nt,e),i(t,ot,e),i(t,at,e),i(t,st,e),i(t,rt,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M),t&&l(C),t&&l($),t&&l(L),t&&l(P),t&&l(H),t&&l(S),t&&l(B),t&&l(I),t&&l(A),t&&l(q),t&&l(E),t&&l(R),t&&l(N),t&&l(W),t&&l(j),t&&l(D),t&&l(Y),t&&l(U),t&&l(F),t&&l(O),t&&l(z),t&&l(_),t&&l(G),t&&l(J),t&&l(K),t&&l(Q),t&&l(V),t&&l(X),t&&l(Z),t&&l(tt),t&&l(et),t&&l(nt),t&&l(ot),t&&l(at),t&&l(st),t&&l(rt)}}}class at extends R{constructor(t){super(),E(this,t,null,ot,s,{})}}function st(e){let n,o,a,s,r,p,h;return{c(){n=c("h1"),n.textContent="Alfred Workflow",o=d(),a=c("p"),a.textContent="Once you install the Alfred ScriptPad Workflow, you will be able to interact with\nScriptPad through Alfred. Most notably, you’ll be able to action scripts and templates\nright from Alfred.",s=d(),r=c("table"),r.innerHTML="<thead><tr><th></th> \n<th></th></tr></thead> \n<tbody><tr><td>sp:run</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the commmand line, they will be prompted for the script to run on it. The user can type part of the name to narrow down the list of possible scripts. When a script is selected, the script is ran with the text given and te results are placed in the topmost application and in the clipboard.</td></tr> \n<tr><td>sp:template</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the commmand line, they will be prompted for the template to run. The user can type part of the name to narrow down the list of possible templates. When a template is selected, the template is ran with the text given and te results are placed in the topmost application and in the clipboard.</td></tr> \n<tr><td>bboard</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, the text will be sent to the BulletinBoard module for displaying. If the text is <code>-</code>, then the message in the BulletinBoard will be errased and the board hiden.</td></tr> \n<tr><td>bbappend</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, the text will be appended to the text in the BulletinBoard.</td></tr> \n<tr><td>note</td> \n<td>This willl accpet text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, they will be asked for a note number and whether to overwrite or append the text. Depending on what the user selects will be done to the note.</td></tr> \n<tr><td>getnote</td> \n<td>This will ask for which note. The note will then be pasted into the topmost application and in the clipboard.</td></tr> \n<tr><td>bb:dialog</td> \n<td>This will ask for which dialog to display. You can type to narrow down the list. It will then ask for a list of parameters surrounded in quotation marks. That will be passed to the dialog program to display the requested dialog. The result are returned and put into the clipboard.</td></tr></tbody>",p=d(),h=c("p"),h.textContent="This workflow is expanded as the ScriptPad program gets more features. Many of these can be trigged by hotkeys as well. Please\nrefer to the workflow to set the hotkeys yourself."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h)}}}class rt extends R{constructor(t){super(),E(this,t,null,st,s,{})}}function it(e){let n,o,a,s,r,p,h,u,m,g,f;return{c(){n=c("h1"),n.textContent="Dropzone Action",o=d(),a=c("p"),a.textContent="When you install the Dropzone actions, you can put text into a ScriptPad note or\nrun scripts on files or text dropped on the action.",s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/DropzoneScriptPadAction.jpg" alt="Script Pad Action Configuration">',p=d(),h=c("p"),h.innerHTML="The <code>Script Pad</code> action will allow you to set it up by clicking on it. When you\nclick on it, it gives you the option to which note to save text to (default is note\n#3) and whether to append it or overwrite it (the default is append). If you\ndrop text files or copied text to the action, it will be applied to the note\nsetup in the configuration when you click on it.",u=d(),m=c("p"),m.innerHTML='<img src="http://localhost:9978/imgs/DropzoneRunScript.jpg" alt="Run Script Action Configuration">',g=d(),f=c("p"),f.innerHTML="The <code>Run Script</code> action allows you to pick a script to apply to dropped text or\nfiles. When you click on the action, it will show the above dialog asking\nfor the script to use. If you drop text, the script is ran on the text and\ncopied back to the clipboard. If you drop a file, the file is changed according\nto the script."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f)}}}class lt extends R{constructor(t){super(),E(this,t,null,it,s,{})}}function ct(e){let n,o,a,s,r,p,h,u,m,g,f;return{c(){n=c("h1"),n.textContent="Keyboard Maestro",o=d(),a=c("p"),a.textContent="When you install the Keyboard Maestro macros, you will have macros to save, append, and\nget text from each of the notes. There is also two keyboard expander macros for\npasting from a note and pasting a template into the current document.",s=d(),r=c("p"),r.innerHTML="By copying text to the clipboard and then pressing <code>&lt;ctrl&gt;&lt;shift&gt;;</code>, a menu will\nappear for which note to use. Just press a number key or select\none of the entries with the mouse. The clipboard text will then be added to the\nbottom of that note.",p=d(),h=c("p"),h.innerHTML="By copying text to the clipboard and then pressing <code>&lt;ctrl&gt;&lt;shift&gt;&#39;</code>, a menu will\nappear for which note to use. Just press a number key or select\none of the entries with the mouse. The clipboard text will then overwrite the\ntext of that note.",u=d(),m=c("p"),m.innerHTML="By typing <code>;/</code>, a template name, and <code>/tp</code>, then the named template will be pasted\ninto the application. For example, by typing <code>;/Today/tp</code> the template named <code>Today</code>\nwill be pasted into the application you are typing.",g=d(),f=c("p"),f.innerHTML="By typing <code>;/</code>, a note number, and <code>/np</code>, then the corresponding note will be pasted\nin it’s place. For example, by typing <code>;/2/np</code> in a wordprocessor, the contents of\nnote #2 will be place in it’s place."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f)}}}class pt extends R{constructor(t){super(),E(this,t,null,ct,s,{})}}function dt(e){let n,o,a,s,r,p,h;return{c(){n=c("h1"),n.textContent="LaunchBar Actions",o=d(),a=c("p"),a.textContent="Once you install the LaunchBar ScriptPad action, you will be able to interact with\nScriptPad through LaunchBar. Most notably, you’ll be able to action scripts and templates\nright from LaunchBar.",s=d(),r=c("table"),r.innerHTML="<thead><tr><th></th> \n<th></th></tr></thead> \n<tbody><tr><td>ScriptPad - Run Script</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the commmand line, they will be prompted for the script to run on it. The user can type part of the name to narrow down the list of possible scripts. When a script is selected, the script is ran with the text given and te results are placed in the topmost application and in the clipboard.</td></tr> \n<tr><td>ScriptPad - Run Template</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the commmand line, they will be prompted for the template to run. The user can type part of the name to narrow down the list of possible templates. When a template is selected, the template is ran with the text given and te results are placed in the topmost application and in the clipboard.</td></tr> \n<tr><td>ScriptPad - Set BulletinBoard</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, the text will be sent to the BulletinBoard module for displaying. If the text is <code>-</code>, then the message in the BulletinBoard will be errased and the board hiden.</td></tr> \n<tr><td>ScriptPad - Append BulletinBoard</td> \n<td>This will accept text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, the text will be appended to the text in the BulletinBoard.</td></tr> \n<tr><td>ScriptPad - Set Note</td> \n<td>This willl accpet text on the command line. When the user presses <code>&lt;enter&gt;</code> on the command line, they will be asked for a note number and whether to overwrite or append the text. Depending on what the user selects will be done to the note.</td></tr> \n<tr><td>ScriptPad - Paste Note</td> \n<td>This will ask for which note. The note will then be pasted into the topmost application and in the clipboard.</td></tr> \n<tr><td>ScriptPad - Dialog</td> \n<td>This will ask for which dialog to display. You can type to narrow down the list. It will then ask for a list of parameters surrounded in quotation marks. That will be passed to the dialog program to display the requested dialog. The result are returned and put into the clipboard.</td></tr></tbody>",p=d(),h=c("p"),h.textContent="This workflow is expanded as the ScriptPad program gets more features."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h)}}}class ht extends R{constructor(t){super(),E(this,t,null,dt,s,{})}}function ut(e){let n,o,a,s,r,p,h;return{c(){n=c("h1"),n.textContent="PopClip Extension",o=d(),a=c("p"),a.textContent="When you install the PopClip extension, it will allow you to select text and\noverwrite or append it to a note. By editing the configuration for the extension,\nyou can change which note and what type of operation to perform.",s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/PopclipConfig.jpg" alt="PopClip Extension Configuration">',p=d(),h=c("p"),h.textContent="When you edit the configuration in PopClip, you will see the above dialog. Here,\nsimply put in the note number and operation type (overwrite or append). When you\nselect text and select the extension in PopClip, that action will be performed."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h)}}}class mt extends R{constructor(t){super(),E(this,t,null,ut,s,{})}}function gt(e){let n,o,a,s,r,p,h,m,g,f,w,y,k,b,T,x,v,M,C,$,L,P,H,S,B,I,A,q,E,R,N,W,j,D,Y,U,F,O,z;return{c(){n=c("h1"),n.textContent="queryUser Program",o=d(),a=c("p"),a.innerHTML="This program is used to enteract with the BulletinBoard module. You use the\n<code>queryUser</code> command line with the following parameters:",s=d(),r=c("pre"),p=d(),h=c("p"),h.innerHTML="Where dialog is the name of the dialog to be displayed. The data1…datan are quoted\ndata fields used to populate the <code>{{data1}}</code> to <code>{{datan}}</code> template macros.",m=d(),g=c("p"),g.textContent="To get a json list of all dialogs defined, both system dialogs and user defined dialogs,\njust run this command:",f=d(),w=c("pre"),y=d(),k=c("p"),k.textContent="You will need to put the queryUser command line program on your path to be able to\nuse it. It’s locations are:",b=d(),T=c("table"),T.innerHTML="<thead><tr><th>OS</th> \n<th>Directory Structure</th></tr></thead> \n<tbody><tr><td>macOS</td> \n<td><code>/Application/ScriptPad/contents/Resources/bin</code></td></tr> \n<tr><td>Linux</td> \n<td>coming soon</td></tr> \n<tr><td>Windows</td> \n<td>coming soon</td></tr></tbody>",x=d(),v=c("h3"),v.textContent="Creating Dialogs",M=d(),C=c("p"),C.innerHTML="The dialogs used are easy to create. In the <code>~/.scriptpad/dialogs</code> directory, create\na file with the name of your dialog with an extension of <code>.json</code>. To create a dialog\ncalled question, you would create the file <code>querstion.json</code>.",$=d(),L=c("p"),L.textContent="The structure for the file is:",P=d(),H=c("pre"),S=d(),B=c("p"),B.innerHTML="The <code>html</code> element will be the html needed to create the dialog and action the\nbuttons in the dialog. The <code>width</code> and <code>height</code> items define the minimum width\nand height of the dialog. The <code>x</code> and <code>y</code> items define the location of the upper\nleft corner of the dialog.",I=d(),A=c("p"),A.textContent="The dialog will be displayed below the message field, if there is a message.",q=d(),E=c("p"),E.innerHTML="For example, this is the file for the <code>question.json</code> dialog:",R=d(),N=c("pre"),W=d(),j=c("p"),j.textContent="Before processing each dialog file, the carrage returns are removed. Therefore, you\ncan define the html on multiple lines. This helps to create dialogs that are easy\nto read.",D=d(),Y=c("p"),Y.innerHTML="The <code>#dialog</code> is the HTML element id for the div element that the dialog HTML is\nplaced. Therefore, you can customize the element by referring to <code>#dialog</code>.",U=d(),F=c("p"),F.innerHTML="To send information back, you just fill the <code>globalThis.sendback</code> variable with a\nfunction that will get the information in the dialog, store it in the\n<code>globalThis.BBData.dialogStore.dialogResult</code> variable. You then call the\n<code>globalThis.BBData.dialogStore.callBack()</code> function to send the information back\nto the queryUser program. You setup the button to call the <code>globalThis.sendback()</code>\nfunction on click event.",O=d(),z=c("p"),z.textContent="This program can be called in scripts or from ScriptPad itself in order to get information\nfrom the user.",u(r,"class","language-zsh"),u(w,"class","language-zsh"),u(H,"class","language-json"),u(N,"class","language-json")},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),r.innerHTML='\n<code class="language-zsh">queryUser &lt;dialog&gt; &lt;data1&gt;.....&lt;datan&gt;</code>',i(t,p,e),i(t,h,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),w.innerHTML='\n<code class="language-zsh">queryUser list</code>',i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e),i(t,C,e),i(t,$,e),i(t,L,e),i(t,P,e),i(t,H,e),H.innerHTML='\n<code class="language-json"><span class="token punctuation">&#123;</span>\n  <span class="token property">"html"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> \n  <span class="token property">"width"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> \n  <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> \n  <span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> \n  <span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">200</span>\n<span class="token punctuation">&#125;</span></code>',i(t,S,e),i(t,B,e),i(t,I,e),i(t,A,e),i(t,q,e),i(t,E,e),i(t,R,e),i(t,N,e),N.innerHTML='\n<code class="language-json"><span class="token punctuation">&#123;</span>\n  <span class="token property">"html"</span><span class="token operator">:</span> "&lt;label><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>data<span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/label>\n  &lt;input id=\'name\' type=\'text\' value=\'<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>data<span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>\' autofocus >&lt;/input>\n  &lt;button type=\'button\' onclick=\'globalThis.sendBack()\'>Okay&lt;/button>\n  &lt;style>\n    button <span class="token punctuation">&#123;</span>\n      margin<span class="token operator">:</span> <span class="token number">10</span>px auto <span class="token number">10</span>px auto;\n      background-color<span class="token operator">:</span> gray;\n    <span class="token punctuation">&#125;</span>\n\n    #dialog <span class="token punctuation">&#123;</span>\n      width<span class="token operator">:</span> <span class="token number">400</span>px;\n      height<span class="token operator">:</span> <span class="token number">80</span>px;\n      align-content<span class="token operator">:</span> center;\n      align-items<span class="token operator">:</span> center;\n      text-align<span class="token operator">:</span> center;\n    <span class="token punctuation">&#125;</span>\n  &lt;/style>\n  &lt;script>\n    globalThis.sendBack = function() <span class="token punctuation">&#123;</span>\n      globalThis.BBData.dialogStore.dialogResult = document.getElementById(\'name\').value; \n      globalThis.BBData.dialogStore.callBack();\n    <span class="token punctuation">&#125;</span>\n  &lt;/script>"<span class="token punctuation">,</span> \n  <span class="token property">"width"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> \n  <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> \n  <span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> \n  <span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">200</span>\n<span class="token punctuation">&#125;</span></code>',i(t,W,e),i(t,j,e),i(t,D,e),i(t,Y,e),i(t,U,e),i(t,F,e),i(t,O,e),i(t,z,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M),t&&l(C),t&&l($),t&&l(L),t&&l(P),t&&l(H),t&&l(S),t&&l(B),t&&l(I),t&&l(A),t&&l(q),t&&l(E),t&&l(R),t&&l(N),t&&l(W),t&&l(j),t&&l(D),t&&l(Y),t&&l(U),t&&l(F),t&&l(O),t&&l(z)}}}class ft extends R{constructor(t){super(),E(this,t,null,gt,s,{})}}function wt(e){let n,o,a,s,r,p,h,m,g,f,w,y,k,b,T,x,v,M,C,$,L,P,H,S,B,I,A,q,E;return{c(){n=c("h1"),n.textContent="Modules",o=d(),a=c("p"),a.textContent="The ScriptPad program has the ability to launch modules. There are\nboth built-in modules and user defined modules.",s=d(),r=c("p"),r.innerHTML="The built-in modules are a part of the <strong>ScripPad</strong> program. I’ll be\nadding new ones in the future, so keep checking for updates.\nCurrently, the builtin-modules are:",p=d(),h=c("ul"),h.innerHTML="<li>BulletinBoard</li> \n<li>Remote Control</li>",m=d(),g=c("h3"),g.textContent="BulletinBoard",f=d(),w=c("p"),w.textContent="This module launches a window with a tcp server. It starts off invisible.\nYou can cause the window to appear and display text you send to it over\ntcp. For example, in Ruby, run this script:",y=d(),k=c("pre"),b=d(),T=c("p"),T.textContent="This script will send the text on the command line to the BulletinBoard module\nand will be displayed above other windows. It’s default location is the upper\nleft corner. To clear the message and have the window close, send ’-’ as the\ntext. By changing the address to send the text from:",x=d(),v=c("pre"),M=d(),C=c("p"),C.textContent="to",$=d(),L=c("pre"),P=d(),H=c("p"),H.textContent="It will append to the already existing text. I use this functionality the most for\ndisplaying contents of a file that gets changed by automated processing.",S=d(),B=c("p"),B.innerHTML="The BulletinBoard also allows you to create and display dialogs that will return\ninformation to the calling program. The <code>queryUser</code> command line program will\nshow a dialog and return it’s results when the user finishes with it. Using and\nmaking more dialogs is covered in the <code>queryUser Program</code> help section.",I=d(),A=c("h3"),A.textContent="Remote Control",q=d(),E=c("p"),E.textContent="The Remote Control module allows the user to load a page on any other computer on\nsame subnet. This web page will display buttons that will execute scripts from\nScriptPad. You can control the buttons and assign any script you want to use. This\nmodule is still under development.",u(k,"class","language-ruby"),u(v,"class","language-ruby"),u(L,"class","language-ruby")},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),k.innerHTML='\n<code class="language-ruby"><span class="token keyword">require</span> <span class="token string">\'net/http\'</span>\n<span class="token keyword">require</span> <span class="token string">\'json\'</span>\n\n<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">uri_encode</span></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n  str<span class="token punctuation">.</span>gsub<span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">UNSAFE</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>match<span class="token operator">|</span>\n    match<span class="token punctuation">.</span>each_byte<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>c<span class="token operator">|</span> sprintf<span class="token punctuation">(</span><span class="token string">\'%%%02X\'</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>ord<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>join\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n<span class="token keyword">if</span> <span class="token constant">ARGV</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\'-\'</span> <span class="token keyword">then</span>\n  message <span class="token operator">=</span> <span class="token string">\'\'</span>\n<span class="token keyword">else</span>\n  message <span class="token operator">=</span> uri_encode<span class="token punctuation">(</span><span class="token constant">ARGV</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\nuri <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9697/api/message/<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>message<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span>\nhttp <span class="token operator">=</span> <span class="token constant">Net</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">HTTP</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span>host<span class="token punctuation">,</span> uri<span class="token punctuation">.</span>port<span class="token punctuation">)</span>\nreq <span class="token operator">=</span> <span class="token constant">Net</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">HTTP</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Get</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">\'Content-Type\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'application/json\'</span><span class="token punctuation">)</span>\nreq<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>msg<span class="token punctuation">:</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>message<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>to_json\nres <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span>req<span class="token punctuation">)</span>\nputs <span class="token string">"response <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>res<span class="token punctuation">.</span>body<span class="token delimiter tag">&#125;</span></span>"</span></code>',i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),v.innerHTML='\n<code class="language-ruby">uri <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9697/api/message/<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>message<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span></code>',i(t,M,e),i(t,C,e),i(t,$,e),i(t,L,e),L.innerHTML='\n<code class="language-ruby">uri <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9697/api/message/append/<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>message<span class="token delimiter tag">&#125;</span></span>"</span><span class="token punctuation">)</span></code>',i(t,P,e),i(t,H,e),i(t,S,e),i(t,B,e),i(t,I,e),i(t,A,e),i(t,q,e),i(t,E,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M),t&&l(C),t&&l($),t&&l(L),t&&l(P),t&&l(H),t&&l(S),t&&l(B),t&&l(I),t&&l(A),t&&l(q),t&&l(E)}}}class yt extends R{constructor(t){super(),E(this,t,null,wt,s,{})}}function kt(e){let n,o,a,s,r,p,h,u,m;return{c(){n=c("h1"),n.textContent="Command Console",o=d(),a=c("p"),a.textContent="From the main menu, you can open the Command Console.",s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/CommandConsole.png" alt="The Command Console">',p=d(),h=c("p"),h.innerHTML='This console gives nine different consoles to run scripts on files. It also\ngives access to the <a href="/#/NodeRed">NodeRed</a> by the right most red button.',u=d(),m=c("p"),m.textContent="When this is functional, it will give the user the ability to have nine\nterminals to different locations and able to run the scripts in ScriptPad on\nany file. It will also have a plugin API system for adding new commands. Eventually,\nnew commands and scripts will be downloadable from GitHub."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m)}}}class bt extends R{constructor(t){super(),E(this,t,null,kt,s,{})}}function Tt(e){let n,o,a,s,r,p,h,u,m,g,f,w,y,k,b,T,x,v,M;return{c(){n=c("h1"),n.textContent="NodeRed",o=d(),a=c("p"),a.innerHTML='The right most red button on the Command Console is for opening the <a href="https://nodered.org/" rel="nofollow">NodeRed</a>\nconsole.',s=d(),r=c("p"),r.innerHTML='<img src="http://localhost:9978/imgs/NodeRed.png" alt="NodeRed Console">',p=d(),h=c("p"),h.innerHTML='The <a href="https://nodered.org/" rel="nofollow">NodeRed</a> console gives\naccess to the NodeRed scripting engine. With it, you can setup automated\nprocesses to access things on the Internet, automate home electronics, or about\nanything that you can imagine. The ScriptPad runs a NodeRed server in the background\nall the time. I currently have around 20 flows running on it and I see no issues\nwith it taking too much processor attention. It isn’t a resource hog at all!',u=d(),m=c("p"),m.textContent="There are currently three custom nodes for ScriptPad in Node-Red when launched\nin this manner. The new nodes are:",g=d(),f=c("table"),f.innerHTML="<thead><tr><th>Node Name</th> \n<th>Description</th></tr></thead> \n<tbody><tr><td>spscripts</td> \n<td>This node allows you to specify any script in ScriptPad. The node will take what comes in the <code>msg.payload</code>, run the script on it, and return a new <code>msg.payload</code> with the results of the script.</td></tr> \n<tr><td>spvariables</td> \n<td>This node will take what comes into the node from <code>msg.payload</code> and save it into the variable named in the node. ScriptPad makes the variable available to scripts and by a REST API. If a client is listening to the websocket of the variable name, they will get the message of it’s change. A client can also connect to the websocket name <code>variablechange</code> to get a message on any variable change.</td></tr> \n<tr><td>splogger</td> \n<td>This node allows the user to take any <code>msg.payload</code> that comes to it and display it in the Node-Red terminal in ScriptPad. This is great for debugging.</td></tr></tbody>",w=d(),y=c("p"),y.innerHTML="At the bottom of the Node-Red console are two buttons: Edit Flows and Stop. The <code>Stop</code>\nbutton will stop the Node-Red server and the button will change to <code>Start</code>. To edit\nyour flows, press the <code>Edit Flow</code> button.",k=d(),b=c("p"),b.innerHTML='<img src="http://localhost:9978/imgs/FlowEditor.png" alt="Edit Flows Window">',T=d(),x=c("p"),x.innerHTML='This is where you can create and edit your Node-Red flows. Please refer to the\n<a href="https://nodered.org/" rel="nofollow">Node-Red website</a> for more information.',v=d(),M=c("p"),M.innerHTML="If you have configured the Node-Red dashboard and turned it on in the preferences,\nthen you will have a <code>Dashboard</code> button as well. When you press the <code>Dashboard</code>\nbutton, it will open the dashboard in a separate window. Please read and follow the\nNode-Red documentation on how to use the Node-Red dashboard."},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,u,e),i(t,m,e),i(t,g,e),i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e),i(t,b,e),i(t,T,e),i(t,x,e),i(t,v,e),i(t,M,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(u),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k),t&&l(b),t&&l(T),t&&l(x),t&&l(v),t&&l(M)}}}class xt extends R{constructor(t){super(),E(this,t,null,Tt,s,{})}}function vt(e){let n,o,a,s,r,p,h,m,g,f,w,y,k;return{c(){n=c("h1"),n.textContent="Web API",o=d(),a=c("p"),a.innerHTML="ScriptPad has a large web based API for interfacing with other applications,\ncommand line tools, or whatever else would help. The base address for the\nAPIs is <code>http://localhost:9978/api</code>. Every endpoint in this table builds\non this base.",s=d(),r=c("table"),r.innerHTML="<thead><tr><th>Endpoint</th> \n<th>Description</th></tr></thead> \n<tbody><tr><td>/web/launch</td> \n<td>This is a PUT method access with the body containing a JSON structure with one element ‘url’. That should contain the URL to open a browser window. This is using the internall browser.</td></tr> \n<tr><td>/note/<number>/(a or w)</number></td> \n<td>A PUT request will assert the note value while the GET request will return the note. Both use a JSON structure with the element <code>note</code>. The <code>a</code> on the end will append to the note while a <code>w</code> will over write.</td></tr> \n<tr><td>/script/list</td> \n<td>A GET request will return a list of scripts that can be ran on ScriptPad.</td></tr> \n<tr><td>/script/run</td> \n<td>A PUT request requires a JSON body with a <code>script</code> element and a <code>text</code> element. The <code>script</code> script will be ran with the <code>text</code> and returned in a JSON structure with a <code>text</code> element.</td></tr> \n<tr><td>/template/list</td> \n<td>A GET request will return the name of all the templates in ScriptPad.</td></tr> \n<tr><td>/template/run</td> \n<td>A PUT request requires a JSON body with a ‘template’ element and a ‘text’ element. The <code>template</code> will be ran with the <code>text</code> as an input. The results are return in a JSON structure with the result in the ‘text’ element.</td></tr> \n<tr><td>/getip</td> \n<td>A GET request will return the IP of the computer that is running ScriptPad.</td></tr> \n<tr><td>/nodered/var/<name></name></td> \n<td>A GET request will return the current value of the Node-Red variable. A PUT request will set the Node-Red variable to the <code>text</code> element of the JSON structure in the body.</td></tr></tbody>",p=d(),h=c("p"),h.textContent="If you create a script on your path with this content:",m=d(),g=c("pre"),f=d(),w=c("p"),w.innerHTML="it will open the URL given to it in the browser window of ScriptPad. You will have to have <code>wget</code> installed on your system.\nI’ve named it <code>openURL</code> and use it to open sites on the command line with <code>openURL &quot;http://customct.com&quot;</code>. That will open my\nweb site.",y=d(),k=c("p"),k.textContent="All the other endpoints are used to make the plugins for Alfred, Keyboard Maestro, Dropzone, PopClip, and Launchpad.",u(g,"class","language-sh")},m(t,e){i(t,n,e),i(t,o,e),i(t,a,e),i(t,s,e),i(t,r,e),i(t,p,e),i(t,h,e),i(t,m,e),i(t,g,e),g.innerHTML='\n<code class="language-sh">#!/bin/sh\n\n/usr/local/bin/wget --body-data=&quot;&#123; &quot;url&quot;: &quot;$1&quot; &#125;&quot; --header=&#39;Content-Type:application/json&#39; &#39;http://localhost:9978/api/web/launch&#39; --method=PUT -O /dev/null 3&gt;/dev/null 2&gt;/dev/null 1&gt;/dev/null</code>',i(t,f,e),i(t,w,e),i(t,y,e),i(t,k,e)},p:t,i:t,o:t,d(t){t&&l(n),t&&l(o),t&&l(a),t&&l(s),t&&l(r),t&&l(p),t&&l(h),t&&l(m),t&&l(g),t&&l(f),t&&l(w),t&&l(y),t&&l(k)}}}class Mt extends R{constructor(t){super(),E(this,t,null,vt,s,{})}}function Ct(t){let e,n;return e=new yt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function $t(t){let e,n;return e=new ft({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Lt(t){let e,n;return e=new Q({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Pt(t){let e,n;return e=new mt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Ht(t){let e,n;return e=new ht({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function St(t){let e,n;return e=new pt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Bt(t){let e,n;return e=new lt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function It(t){let e,n;return e=new rt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function At(t){let e,n;return e=new Mt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function qt(t){let e,n;return e=new xt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Et(t){let e,n;return e=new bt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Rt(t){let e,n;return e=new nt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Nt(t){let e,n;return e=new at({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Wt(t){let e,n;return e=new X({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function jt(t){let e,n;return e=new tt({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Dt(t){let e,n;return e=new J({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Yt(t){let e,n;return e=new _({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Ut(t){let e,n;return e=new O({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Ft(t){let e,n;return e=new U({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function Ot(t){let e,n;return e=new D({}),{c(){B(e.$$.fragment)},m(t,o){I(e,t,o),n=!0},i(t){n||(H(e.$$.fragment,t),n=!0)},o(t){S(e.$$.fragment,t),n=!1},d(t){A(e,t)}}}function zt(t){let e,n,a,s,p,m,g,f,w,y,k,b,T,x,v,M,C,$,L,B,I,A,q,E,R,N,W,j,D,Y,U,F,O,z,_,G,J,K,Q,V,X,Z,tt,et,nt,ot,at,st,rt,it,lt;const ct=[Ot,Ft,Ut,Yt,Dt,jt,Wt,Nt,Rt,Et,qt,At,It,Bt,St,Ht,Pt,Lt,$t,Ct],pt=[];function dt(t,e){return"Main"===t[0]?0:"MainWindow"===t[0]?1:"MainMenu"===t[0]?2:"ScriptEditor"===t[0]?3:"RegularExpressionEditor"===t[0]?4:"TodoList"===t[0]?5:"FilesUsed"===t[0]?6:"Templater"===t[0]?7:"Preferences"===t[0]?8:"CommandConsole"===t[0]?9:"NodeRed"===t[0]?10:"API"===t[0]?11:"Alfred"===t[0]?12:"Dropzone"===t[0]?13:"KeyboardMaestro"===t[0]?14:"LaunchBar"===t[0]?15:"PopClip"===t[0]?16:"FeaturesStillComming"===t[0]?17:"queryUser"===t[0]?18:"Modules"===t[0]?19:-1}return~(at=dt(t))&&(st=pt[at]=ct[at](t)),{c(){e=c("div"),n=c("div"),a=c("h2"),a.textContent="Contents",s=d(),p=c("ul"),m=c("li"),m.textContent="ScriptPad",g=d(),f=c("li"),f.textContent="Main Window",w=d(),y=c("li"),y.textContent="Main Menu",k=d(),b=c("li"),b.textContent="Script Editor",T=d(),x=c("li"),x.textContent="Regular Expression Editor",v=d(),M=c("li"),M.textContent="Todo lists",C=d(),$=c("li"),$.textContent="Templater",L=d(),B=c("li"),B.textContent="Preferences",I=d(),A=c("li"),A.textContent="Command Console",q=d(),E=c("li"),E.textContent="Node-Red",R=d(),N=c("li"),N.textContent="Modules",W=d(),j=c("li"),j.textContent="queryUser Program",D=d(),Y=c("li"),Y.textContent="API Reference",U=d(),F=c("li"),F.textContent="Alfred Workflow",O=d(),z=c("li"),z.textContent="Dropzone Action",_=d(),G=c("li"),G.textContent="Keyboard Maestro",J=d(),K=c("li"),K.textContent="LaunchBar Actions",Q=d(),V=c("li"),V.textContent="PopClip Extension",X=d(),Z=c("li"),Z.textContent="Files Used",tt=d(),et=c("li"),et.textContent="Features Still to Come",nt=d(),ot=c("div"),st&&st.c(),u(m,"class","svelte-1y988a2"),u(f,"class","svelte-1y988a2"),u(y,"class","svelte-1y988a2"),u(b,"class","svelte-1y988a2"),u(x,"class","svelte-1y988a2"),u(M,"class","svelte-1y988a2"),u($,"class","svelte-1y988a2"),u(B,"class","svelte-1y988a2"),u(A,"class","svelte-1y988a2"),u(E,"class","svelte-1y988a2"),u(N,"class","svelte-1y988a2"),u(j,"class","svelte-1y988a2"),u(Y,"class","svelte-1y988a2"),u(F,"class","svelte-1y988a2"),u(z,"class","svelte-1y988a2"),u(G,"class","svelte-1y988a2"),u(K,"class","svelte-1y988a2"),u(V,"class","svelte-1y988a2"),u(Z,"class","svelte-1y988a2"),u(et,"class","svelte-1y988a2"),u(n,"id","sidebar"),u(n,"class","svelte-1y988a2"),u(ot,"id","main"),u(ot,"class","svelte-1y988a2"),u(e,"id","page"),u(e,"class","svelte-1y988a2")},m(o,l){i(o,e,l),r(e,n),r(n,a),r(n,s),r(n,p),r(p,m),r(p,g),r(p,f),r(p,w),r(p,y),r(p,k),r(p,b),r(p,T),r(p,x),r(p,v),r(p,M),r(p,C),r(p,$),r(p,L),r(p,B),r(p,I),r(p,A),r(p,q),r(p,E),r(p,R),r(p,N),r(p,W),r(p,j),r(p,D),r(p,Y),r(p,U),r(p,F),r(p,O),r(p,z),r(p,_),r(p,G),r(p,J),r(p,K),r(p,Q),r(p,V),r(p,X),r(p,Z),r(p,tt),r(p,et),r(e,nt),r(e,ot),~at&&pt[at].m(ot,null),rt=!0,it||(lt=[h(m,"click",t[2]),h(f,"click",t[3]),h(y,"click",t[4]),h(b,"click",t[5]),h(x,"click",t[6]),h(M,"click",t[7]),h($,"click",t[8]),h(B,"click",t[9]),h(A,"click",t[10]),h(E,"click",t[11]),h(N,"click",t[12]),h(j,"click",t[13]),h(Y,"click",t[14]),h(F,"click",t[15]),h(z,"click",t[16]),h(G,"click",t[17]),h(K,"click",t[18]),h(V,"click",t[19]),h(Z,"click",t[20]),h(et,"click",t[21])],it=!0)},p(t,[e]){let n=at;at=dt(t),at!==n&&(st&&(P={r:0,c:[],p:P},S(pt[n],1,1,()=>{pt[n]=null}),P.r||o(P.c),P=P.p),~at?(st=pt[at],st||(st=pt[at]=ct[at](t),st.c()),H(st,1),st.m(ot,null)):st=null)},i(t){rt||(H(st),rt=!0)},o(t){S(st),rt=!1},d(t){t&&l(e),~at&&pt[at].d(),it=!1,o(lt)}}}function _t(t,e,n){let o="Main";function a(t){n(0,o=t)}return[o,a,()=>{a("Main")},()=>{a("MainWindow")},()=>{a("MainMenu")},()=>{a("ScriptEditor")},()=>{a("RegularExpressionEditor")},()=>{a("TodoList")},()=>{a("Templater")},()=>{a("Preferences")},()=>{a("CommandConsole")},()=>{a("NodeRed")},()=>{a("Modules")},()=>{a("queryUser")},()=>{a("API")},()=>{a("Alfred")},()=>{a("Dropzone")},()=>{a("KeyboardMaestro")},()=>{a("LaunchBar")},()=>{a("PopClip")},()=>{a("FilesUsed")},()=>{a("FeaturesStillComming")}]}return new class extends R{constructor(t){super(),E(this,t,_t,zt,s,{})}}({target:document.body,props:{}})}();
//# sourceMappingURL=bundle.js.map
